@page "/datalist"
@using BlazorStrap;
@inject NavigationManager NavigationManager
@inject ApiService ApiService
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<BSContainer Container="Container.Fluid">
    <h3>COVID Tracking Data</h3>

    <BSButton Color="BSColor.Info" @onclick="RecargarPagina" IsSubmit="true">Recargar Página</BSButton>
    <BSButton Color="BSColor.Dark" @onclick="RecargarDatos">Recargar Datos</BSButton>

    <input type="text" value="@paginaActualTemp" @oninput="ActualizarTemp" @onkeydown="ValidarYManejarEnter" />

    <div class="@BS.Input_Group mb-2">
        <span class="@BS.Input_Group_Text">Custom Filter</span>
        <BSInput InputType="InputType.Text" placeholder="Buscar..." Value="searchTerm" @oninput="RealizarBusqueda" UpdateOnInput="true" />
    </div>

    <!-- Paginador -->
    <div>
        <BSButton Color="BSColor.Light" disabled="@IsFirstPage()" @onclick="(e) => IrAPagina(1)">Primero</BSButton>
        <BSButton Color="BSColor.Light" disabled="@IsFirstPage()" @onclick="(e) => IrAPagina(paginaActual -1 )">Atrás</BSButton>
        <span>Página @paginaActual de @totalPaginas</span>
        <BSButton Color="BSColor.Light" disabled="@IsLastPage()" @onclick="(e) => IrAPagina(paginaActual + 1)">Siguiente</BSButton>
        <BSButton Color="BSColor.Light" disabled="@IsLastPage()" @onclick="(e) => IrAPagina(totalPaginas)">Último</BSButton>
        <label for="resultadosPorPagina">Resultados por Página:</label>
        <select id="resultadosPorPagina" @bind="resultadosPorPagina" @oninput="CambiarResultadosPorPagina">
            <option value="10">10 por página</option>
            <option value="20">20 por página</option>
            <option value="50">50 por página</option>
        </select>
        @*<BSDropdown id="resultadosPorPagina"  @oninput="CambiarResultadosPorPagina">
            <Toggler><BSToggle  Class="btn btn-secondary">Resultados por pagina</BSToggle></Toggler>
            <Content>
                <BSDropdownItem value="10">10 por página</BSDropdownItem>
                <BSDropdownItem value="20">20 por página</BSDropdownItem>
                <BSDropdownItem value="50">50 por página</BSDropdownItem>
            </Content>
        </BSDropdown>*@
    </div>

    @if (paginatedCovidData != null && paginatedCovidData.Any())
    {
        <BSTable Color="BSColor.Light" IsBordered="true" IsBorderLess="false" IsCaptionTop="true" IsStriped="true">
            <BSTHead>
                <BSTR>
                    <BSTD>Date</BSTD>
                    <BSTD>States</BSTD>
                    <BSTD>Positive</BSTD>
                    <BSTD>Negative</BSTD>
                    <BSTD>Pending</BSTD>
                    <BSTD>Hospitalized Currently</BSTD>
                    <BSTD>Hospitalized Cumulative</BSTD>
                    <BSTD>In ICU Currently</BSTD>
                    <BSTD>In ICU Cumulative</BSTD>
                    <BSTD>On Ventilator Currently</BSTD>
                    <BSTD>On Ventilator Cumulative</BSTD>
                    <BSTD>Date Checked</BSTD>
                    <BSTD>DeaBSTD</BSTD>
                    <BSTD>Hospitalized</BSTD>
                    <BSTD>Total Test Results</BSTD>
                    <BSTD>Last Modified</BSTD>
                    <BSTD>Recovered</BSTD>
                    <BSTD>Total</BSTD>
                    <BSTD>PosNeg</BSTD>
                    <BSTD>DeaBSTD Increase</BSTD>
                    <BSTD>Hospitalized Increase</BSTD>
                    <BSTD>Negative Increase</BSTD>
                    <BSTD>Positive Increase</BSTD>
                    <BSTD>Total Test Results Increase</BSTD>
                    <BSTD>Hash</BSTD>
                </BSTR>
            </BSTHead>
            <BSTBody>
                @foreach (var data in paginatedCovidData)
                {
                    <BSTR>
                        <BSTD>@data.Date</BSTD>
                        @*<BSTD>@DateTimeOffset.FromUnixTimeMilliseconds(data.Date).ToString("yyyy-MM-dd")</BSTD>*@
                        <BSTD>@data.States</BSTD>
                        <BSTD>@data.Positive</BSTD>
                        <BSTD>@data.Negative</BSTD>
                        <BSTD>@data.Pending</BSTD>
                        <BSTD>@data.HospitalizedCurrently</BSTD>
                        <BSTD>@data.HospitalizedCumulative</BSTD>
                        <BSTD>@data.InIcuCurrently</BSTD>
                        <BSTD>@data.InIcuCumulative</BSTD>
                        <BSTD>@data.OnVentilatorCurrently</BSTD>
                        <BSTD>@data.OnVentilatorCumulative</BSTD>
                        <BSTD>@data.DateChecked</BSTD>
                        @*<BSTD>@data.DateChecked.ToString("yyyy-MM-ddTHH:mm:ssZ")</BSTD>*@
                        <BSTD>@data.Death</BSTD>
                        <BSTD>@data.Hospitalized</BSTD>
                        <BSTD>@data.TotalTestResults</BSTD>
                        <BSTD>@data.LastModified</BSTD>
                        @*<BSTD>@data.LastModified.ToString("yyyy-MM-ddTHH:mm:ssZ")</BSTD>*@
                        <BSTD>@data.Recovered</BSTD>
                        <BSTD>@data.Total</BSTD>
                        <BSTD>@data.PosNeg</BSTD>
                        <BSTD>@data.DeathIncrease</BSTD>
                        <BSTD>@data.HospitalizedIncrease</BSTD>
                        <BSTD>@data.NegativeIncrease</BSTD>
                        <BSTD>@data.PositiveIncrease</BSTD>
                        <BSTD>@data.TotalTestResultsIncrease</BSTD>
                        <BSTD>@data.Hash</BSTD>
                    </BSTR>
                }
            </BSTBody>
        </BSTable>
    }
    else
    {
        <p>No hay información disponible.</p>
    }
</BSContainer>

@code {
    private List<CovidData> covidData = new List<CovidData>();
    private List<CovidData> paginatedCovidData = new List<CovidData>();
    private int paginaActual = 1;
    private int resultadosPorPagina = 10;
    private int totalPaginas = 0;
    private string paginaActualTemp = "";
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync() => await InicializarGrilla();

    private async Task CargarDatos(string apiUrl)
    {
        var allData = await ApiService.GetAsync<List<CovidData>>(apiUrl);

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            covidData = allData
            .Where(data =>
                PropiedadesContienenTermino(data, searchTerm)
            )
            .ToList();
        }
        else
        {
            covidData = allData;
        }

        PaginarDatos();
    }

    private bool PropiedadesContienenTermino(CovidData data, string term)
    {
        var properties = typeof(CovidData).GetProperties();
        foreach (var property in properties)
        {
            var value = property.GetValue(data);
            if (value != null && value.ToString().Contains(term, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
        }
        return false;
    }

    private async Task InicializarGrilla()
    {
        paginaActual = 1;
        resultadosPorPagina = 10;
        totalPaginas = 0;
        var url = "https://api.covidtracking.com/v1/us/daily.json"; // Configuration["CovidApi:BaseUrl"];
        if (string.IsNullOrEmpty(url))
        {
            throw new ApplicationException("Configuración EndPoint incorrecta");
        }
        await CargarDatos(url);
    }

    private void PaginarDatos()
    {
        int inicio = (paginaActual - 1) * resultadosPorPagina;
        paginatedCovidData = covidData.Skip(inicio).Take(resultadosPorPagina).ToList();
        CalcularTotalPaginas();
        StateHasChanged();
    }

    // Métodos de paginación
    private void IrAPagina(int pagina)
    {
        if (pagina >= 1 && pagina <= totalPaginas)
        {
            paginaActual = pagina;
        }
        PaginarDatos();
    }

    private void CambiarResultadosPorPagina(ChangeEventArgs e)
    {
        resultadosPorPagina = Convert.ToInt32(e.Value);
        paginaActual = 1;
        PaginarDatos();
        StateHasChanged();
    }

    // Botón para recargar datos
    private void RecargarPagina() => NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    private async Task RecargarDatos()
    {
        searchTerm = string.Empty;
        await InicializarGrilla();
    }
    private bool IsFirstPage() => paginaActual == 1;

    private bool IsLastPage() => paginaActual == totalPaginas;

    private void CalcularTotalPaginas()
    {
        totalPaginas = (int)Math.Ceiling((double)covidData.Count / resultadosPorPagina);
        StateHasChanged();
    }

    private void ValidarYManejarEnter(KeyboardEventArgs e)
    {
        // Validar que la tecla presionada sea un número
        if (!char.IsDigit(e.Key.FirstOrDefault()) && e.Key != "Enter")
        {
            return;
        }

        // Verificar si la tecla presionada es Enter (código 13)
        if (e.Key == "Enter")
        {
            // Validar la entrada y actualizar 'paginaActual' si es válida
            if (int.TryParse(paginaActualTemp, out int result))
            {
                IrAPagina(result);
            }
        }
    }

    private void ActualizarTemp(ChangeEventArgs e) => paginaActualTemp = e.Value?.ToString() ?? string.Empty;

    private async Task RealizarBusqueda(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        await InicializarGrilla();
    }
}